package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lenovo.week.bean.ChildListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_LIST_BEAN".
*/
public class ChildListBeanDao extends AbstractDao<ChildListBean, Long> {

    public static final String TABLENAME = "CHILD_LIST_BEAN";

    /**
     * Properties of entity ChildListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Iid = new Property(0, Long.class, "iid", true, "_id");
        public final static Property AirTime = new Property(1, int.class, "airTime", false, "AIR_TIME");
        public final static Property Duration = new Property(2, String.class, "duration", false, "DURATION");
        public final static Property LoadType = new Property(3, String.class, "loadType", false, "LOAD_TYPE");
        public final static Property Score = new Property(4, int.class, "score", false, "SCORE");
        public final static Property AngleIcon = new Property(5, String.class, "angleIcon", false, "ANGLE_ICON");
        public final static Property DataId = new Property(6, String.class, "dataId", false, "DATA_ID");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property LoadURL = new Property(8, String.class, "loadURL", false, "LOAD_URL");
        public final static Property ShareURL = new Property(9, String.class, "shareURL", false, "SHARE_URL");
        public final static Property Pic = new Property(10, String.class, "pic", false, "PIC");
        public final static Property Title = new Property(11, String.class, "title", false, "TITLE");
        public final static Property RoomId = new Property(12, String.class, "roomId", false, "ROOM_ID");
    }


    public ChildListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChildListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: iid
                "\"AIR_TIME\" INTEGER NOT NULL ," + // 1: airTime
                "\"DURATION\" TEXT," + // 2: duration
                "\"LOAD_TYPE\" TEXT," + // 3: loadType
                "\"SCORE\" INTEGER NOT NULL ," + // 4: score
                "\"ANGLE_ICON\" TEXT," + // 5: angleIcon
                "\"DATA_ID\" TEXT," + // 6: dataId
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"LOAD_URL\" TEXT," + // 8: loadURL
                "\"SHARE_URL\" TEXT," + // 9: shareURL
                "\"PIC\" TEXT," + // 10: pic
                "\"TITLE\" TEXT," + // 11: title
                "\"ROOM_ID\" TEXT);"); // 12: roomId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildListBean entity) {
        stmt.clearBindings();
 
        Long iid = entity.getIid();
        if (iid != null) {
            stmt.bindLong(1, iid);
        }
        stmt.bindLong(2, entity.getAirTime());
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(3, duration);
        }
 
        String loadType = entity.getLoadType();
        if (loadType != null) {
            stmt.bindString(4, loadType);
        }
        stmt.bindLong(5, entity.getScore());
 
        String angleIcon = entity.getAngleIcon();
        if (angleIcon != null) {
            stmt.bindString(6, angleIcon);
        }
 
        String dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindString(7, dataId);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String loadURL = entity.getLoadURL();
        if (loadURL != null) {
            stmt.bindString(9, loadURL);
        }
 
        String shareURL = entity.getShareURL();
        if (shareURL != null) {
            stmt.bindString(10, shareURL);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(11, pic);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(13, roomId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildListBean entity) {
        stmt.clearBindings();
 
        Long iid = entity.getIid();
        if (iid != null) {
            stmt.bindLong(1, iid);
        }
        stmt.bindLong(2, entity.getAirTime());
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(3, duration);
        }
 
        String loadType = entity.getLoadType();
        if (loadType != null) {
            stmt.bindString(4, loadType);
        }
        stmt.bindLong(5, entity.getScore());
 
        String angleIcon = entity.getAngleIcon();
        if (angleIcon != null) {
            stmt.bindString(6, angleIcon);
        }
 
        String dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindString(7, dataId);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String loadURL = entity.getLoadURL();
        if (loadURL != null) {
            stmt.bindString(9, loadURL);
        }
 
        String shareURL = entity.getShareURL();
        if (shareURL != null) {
            stmt.bindString(10, shareURL);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(11, pic);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(13, roomId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChildListBean readEntity(Cursor cursor, int offset) {
        ChildListBean entity = new ChildListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // iid
            cursor.getInt(offset + 1), // airTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // duration
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // loadType
            cursor.getInt(offset + 4), // score
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // angleIcon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dataId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // loadURL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // shareURL
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pic
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // title
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // roomId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildListBean entity, int offset) {
        entity.setIid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAirTime(cursor.getInt(offset + 1));
        entity.setDuration(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLoadType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScore(cursor.getInt(offset + 4));
        entity.setAngleIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDataId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLoadURL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShareURL(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRoomId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChildListBean entity, long rowId) {
        entity.setIid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChildListBean entity) {
        if(entity != null) {
            return entity.getIid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChildListBean entity) {
        return entity.getIid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
